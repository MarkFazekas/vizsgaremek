const app = require('./server');
const mongoose = require('mongoose');
const config = require('config');
const {response} = require('express');

const supertest = require('supertest');
const superagent = require('superagent');
const logger = require('./config/logger');
const Vehicle = require('./models/vehicle.model');

describe('REST API integration tests', () => {

    const insertVehicles = [
        {
            "plate_number": "LGG-873",
            "manufacturer": "Mercedes-Benz",
            "model": "G-Class",
            "production_year": 2009
        },
        {
            "plate_number": "XKV-065",
            "manufacturer": "Chrysler",
            "model": "Sebring",
            "production_year": 1996
        },

    ];

    let lastAccessToken = '';

    beforeEach(done => {

            const {host} = config.get('database');

            mongoose
                .connect(host, {
                    useNewUrlParser: true,
                    useUnifiedTopology: true
                })
                .then(() => {
                    done();
                })
                .catch(err => {
                    logger.error(err);
                    process.exit();
                });

            superagent
                .post('/login')
                .send({
                    email: 'kgasparro0@prnewswire.com',
                    password: 'Atl++0CXeYwScsBg3HNWrEBdGLqWUuLtgVYrZ4En0wiF4c07Mib4S2WOfggYccVL'
                })
                .set('Content-Type', `application/json`)
                .set('accept', 'json')
                .end((err, res) => {
                    if (err) {
                        logger.error(err);
                        return done();
                    }
                    lastAccessToken = res.body.accessToken;
                    done();
                });
        }
    );

    afterEach(done => {
        mongoose.connection.db.dropDatabase(() => {
            mongoose.connection.close(() => done())
        });
    });

    test('GET /vehicles', () => {
        return Vehicle.insertMany(insertVehicles)
            .then(() => supertest(app).get('/vehicles').expect(200))
            .then(response => {
                expect(Array.isArray(response.body)).toBeTruthy();
                expect(response.body.length).toEqual(insertVehicles.length);

                response.body.forEach((vehicle, index) => {
                    expect(vehicle.plate_number).toBe(insertVehicles[index].plate_number);
                    expect(vehicle.manufacturer).toEqual(insertVehicles[index].manufacturer);
                    expect(vehicle.model).toBe(insertVehicles[index].model);
                    expect(vehicle.production_year).toBe(insertVehicles[index].production_year);
                });
            });
    });

    test('GET /marvel-characters/:id', () => {
        let vehicleId;
        return Vehicle.insertMany(insertVehicles)
            .then(marvelCharacters => {
                vehicleId = marvelCharacters[0].id;
                return supertest(app).get(`/vehicles/${vehicleId}`).expect(200);
            })
            .then(response => {
                const vehicle = response.body;
                expect(vehicle.plate_number).toBe(insertVehicles[index].plate_number);
                expect(vehicle.manufacturer).toEqual(insertVehicles[index].manufacturer);
                expect(vehicle.model).toBe(insertVehicles[index].model);
                expect(vehicle.production_year).toBe(insertVehicles[index].production_year);
            });
    });
});
